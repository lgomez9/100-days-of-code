// Challenge 44: Pentagon numbers
import java.lang.*;
/* Pentagonal numbers are generated by the formula, P_n = n(3n-1) / 2. The first
 * ten pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
 * 70 - 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference
 * are pentagonal and D = |Pk - Pj| is minimized; what is the value of D?
 *
 */

public class challenge44 {
  // Function that returns the nth pentagonal number
  static int nthPentagonal(int n) {
    return (n * (3 * n - 1)) / 2;
  }

  // Function that returns whether a number is pentagonal
  static boolean isPentagonal(int n) {
    // Can rearrange pentagonal number formula to n = (\sqrt(24Pn + 1) + 1) / 6
    // using quadratic formula
    // Check the result of the sqrt of 24x + 1
    double root = Math.sqrt(24 * n + 1);

    // If the root + 1 mod 6 = 0, return the whole thing
    if((root + 1) % 6 == 0) return true;
    else return false;
  }

  // Function that loops through all possible pentagonal numbers until it finds the correct Pj and Pk
  static int smallestD() {
    // Start with smallest pentagonal number
    int i = 1;
    int smallestD = 0;
    boolean found = false;


    // Continue looping until you find the first pair of pentagonal numbers that
    // sum and subtract to pentagonal number
    while(!found) {
      i++;

      int firstPent = nthPentagonal(i);

      for(int j = i-1; j > 0; j--) {
        int secondPent = nthPentagonal(j);
        int sum = firstPent + secondPent;
        int diff = firstPent - secondPent;
        if(isPentagonal(sum) && isPentagonal(diff)) {
          smallestD = diff;
          found = true;
          break;
        }
      }
    }

    return smallestD;
  }

  public static void main(String args[]) {
    System.out.println("Smallest difference between pentagonal numbers that sum and subtract to pentagonal numbers is " + smallestD());
  }
}
