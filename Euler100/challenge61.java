// Challenge 61: Cyclical figurate numbers
import java.util.*;

/* Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
 * numbers and are generated by the following formulae:
 *
 * Triangle     P_(3, n) = n(n+1)/2           1, 3, 6, 10, 15, ....
 * Square       P_(4, n) = n^2                1, 4, 9, 16, 25, ....
 * Pentagonal   P_(5, n) = n(3n-1)/2          1, 5, 12, 22, 35, ....
 * Hexagonal    P_(6, n) = n(2n-1)            1, 6, 15, 28, 45, ....
 * Heptagonal   P_(7, n) = n(5n-3)/2          1, 7, 18, 34, 55, ....
 * Octagonal    P_(8, n) = n(3n-2)            1, 8, 21, 40, 65, ....
 *
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties
 *
 * 1. The set is cyclic, in that the last two digits of each number is the first
 *    two digits of the next number (including the last number with the first).
 *
 * 2. Each polygonal type: triangle, square, and pentagonal, is represented by
 *    different numbers in the set.
 *
 * 3. This is the only set of 4-digit numbers with this property.
 *
 *
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which each
 * polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal,
 * is represented by a different number in the set.
 */

public class challenge61 {
  /* Initial thoughts
   * Need to find the inverse functions for those sequences
   * Need a function to tell if a number is the next number in the cycle
   */

  // Function that returns if a number is triangle 0
  static boolean isTriangle(int n) {
    double result = (-1 + Math.sqrt(1 + 8 * n)) / 2.0;
    return result % 1 == 0;
  }

  // Function that returns if a number is square 1
  static boolean isSquare(int n) {
    return Math.sqrt(n) % 1 == 0;
  }

  // Function that returns if a number is pentagonal 2
  static boolean isPentagonal(int n) {
    double result = (1 + Math.sqrt(1 + 24*n)) / 6.0;
    return result % 1 == 0;
  }

  // Function that returns if a number is hexagonal 3
  static boolean isHexagonal(int n) {
    double result = (1 + Math.sqrt(1 + 8*n)) / 4.0;
    return result % 1 == 0;
  }

  // Function that returns if a number is heptagonal 4
  static boolean isHeptagonal(int n) {
    double result = (3 + Math.sqrt(9 + 40*n)) / 10.0;
    return result % 1 == 0;
  }

  // Function that returns if a number is octagonal 5
  static boolean isOctagonal(int n) {
    double result = (1 + Math.sqrt(1 + 3*n)) / 3.0;
    return result % 1 == 0;
  }

  // Function that returns if b is a cycle after a
  static boolean isCycle(int a, int b) {
    int lastTwo = a % 100;
    int firstTwo = b / 100;

    return lastTwo == firstTwo;
  }

  // Function that finds if n is a polygonal number, returns appropriate index or -1 if not true
  static int isPolygonal(int n, boolean[] polygonals) {
    if(isTriangle(n) && !polygonals[0]) return 0;
    if(isSquare(n) && !polygonals[1]) return 1;
    if(isPentagonal(n) && !polygonals[2]) return 2;
    if(isHexagonal(n) && !polygonals[3]) return 3;
    if(isHeptagonal(n) && !polygonals[4]) return 4;
    if(isOctagonal(n) && !polygonals[5]) return 5;

    return -1;
  }

  public static void main(String args[]) {
    // Test triangle function
    System.out.println("10 is a triangle number: " + isTriangle(10));
    System.out.println("9 is a triangle number: " + isTriangle(9));

    // Test square function
    System.out.println("49 is a square number: " + isSquare(49));
    System.out.println("48 is a square number: " + isSquare(48));

    // Test pentagonal function
    System.out.println("35 is a pentagonal number: " + isPentagonal(35));
    System.out.println("34 is a pentagonal number: " + isPentagonal(34));

    // Test hexagonal function
    System.out.println("45 is a hexagonal number: " + isHexagonal(45));
    System.out.println("46 is a hexagonal number: " + isHexagonal(46));

    // Test heptagonal function
    System.out.println("55 is a heptagonal number: " + isHeptagonal(55));
    System.out.println("56 is a heptagonal number: " + isHeptagonal(56));

    // Test octagonal function
    System.out.println("65 is an octagonal number: " + isOctagonal(65));
    System.out.println("67 is an octagonal number: " + isOctagonal(67));

    // Test cycle function
    System.out.println("2882 is a next cycle for 8128: " + isCycle(8128, 2882));

    // Set up brute force loops
    // First number
    for(int a = 1000; a < 10000; a++) {
      boolean[] polygonals = new boolean[6];
      int aStatus = isPolygonal(a, polygonals);
      if(aStatus == -1) continue;
      polygonals[aStatus] = true;

      // Second number
      for(int b = 1000; b < 10000; b++) {
        // Reset polygonals array
        Arrays.fill(polygonals, false);
        polygonals[aStatus] = true;

        // Now check
        int bStatus = isPolygonal(b, polygonals);
        if(bStatus == -1 || !isCycle(a, b)) continue;
        polygonals[bStatus] = true;

        // Third number
        for(int c = 1000; c < 10000; c++) {
          // Reset polygonals array
          Arrays.fill(polygonals, false);
          polygonals[aStatus] = true;
          polygonals[bStatus] = true;

          int cStatus = isPolygonal(c, polygonals);
          if(cStatus == -1 || !isCycle(b, c)) continue;
          polygonals[cStatus] = true;

          // Fourth number
          for(int d = 1000; d < 10000; d++) {
            // Reset polygonals array
            Arrays.fill(polygonals, false);
            polygonals[aStatus] = true;
            polygonals[bStatus] = true;
            polygonals[cStatus] = true;


            int dStatus = isPolygonal(d, polygonals);
            if(dStatus == -1 || !isCycle(c, d)) continue;
            polygonals[dStatus] = true;

            // Fifth number
            for(int e = 1000; e < 10000; e++) {
              // Reset polygonals array
              Arrays.fill(polygonals, false);
              polygonals[aStatus] = true;
              polygonals[bStatus] = true;
              polygonals[cStatus] = true;
              polygonals[dStatus] = true;


              int eStatus = isPolygonal(e, polygonals);
              if(eStatus == -1 || !isCycle(d, e)) continue;
              polygonals[eStatus] = true;

              // Sixth number
              for(int f = 1000; f < 10000; f++) {
                // Reset polygonals array
                Arrays.fill(polygonals, false);
                polygonals[aStatus] = true;
                polygonals[bStatus] = true;
                polygonals[cStatus] = true;
                polygonals[dStatus] = true;
                polygonals[eStatus] = true;

                int fStatus = isPolygonal(f, polygonals);
                if(fStatus == -1 || !isCycle(e, f) || !isCycle(f, a)) continue;
                polygonals[fStatus] = true;

                System.out.print("The only ordered set of 4-digit numbers with each polygonal is: ");
                System.out.println(a + ", " + b + ", " + c + ", " + d + ", " + e + ", " + f);
                System.out.println("Their sum is " + (a+b+c+d+e+f));
              }
            }
          }
        }
      }
    }
  }
}
